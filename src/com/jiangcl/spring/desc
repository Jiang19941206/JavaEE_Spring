Spring
    概述
        1、轻量级，spring是非入侵式的，基于spring开发的应用可以不依赖与spring的api
        2、依赖注入（DI）即控制反转（IOC）
        3、面向切面
        4、容器，spring是一个容器，因为它包含并且管理应用对象的生命周期
        5、框架，spring实现了使用简单的组件配置组合成一个复杂的应用，在spring中可以使用xml和Java注解组合这些对象。
        6、一站式，在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库

    spring属性注入的三种方式
        1、属性注入，通过set(Object param)方法注入，<property name="name" value="Spring"></property>
        2、构造器注入，通过有参数的构造器注入，<constructor-arg value="Spring"></constructor-arg>
            使用构造器注入可以使用位置（index）或者参数类型（type）区分重载的构造器
        3、工厂方法注入

    Spring Bean的作用域
        使用bean的scope属性配置bean的作用域
        默认值为singleton，容器初始化时创建bean的实例，在整个容器的生命周期内只会存在一个实例
        当scope="prototype"是，容器初始化时不会创建bean的实例，而是在每次调用getBean()方法时创建bean的实例，并返回
        <bean id="helloSpring" class="HelloSpring" scope="singleton">
                <property name="name" value="Spring"></property>
        </bean>

    IOC容器中Bean的生命周期
        1、调用Bean的构造器，创建Bean的实例
        2、为Bean的属性设值，以及其他Bean对它的引用
        3、将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization()方法
        4、调用Bean的初始化方法
        5、将Bean实例传递给Bean后置处理器的postProcessAfterInitialization()方法
        6、使用Bean
        7、当容器关闭时，调用了Bean的销毁方法

            测试结果如下
            constructor。。。
            setName。。。
            postProcessBeforeInitializationSpringCycle{name='jiangcl'}：cycle
            init。。。
            postProcessAfterInitializationSpringCycle{name='jiangcl'}：cycle
            SpringCycle{name='jiangcl'}
            destroy。。。

    使用注解配置bean
        在spring配置文件中声明<context:component-scan>:
            basepackge属性指定一个需要扫描的基类包名；spring容器将会扫描这个基类包及其子包中的所有类
            当需要扫描多个包时，可以使用逗号分隔
            可以通过resource-pattern指定扫描的资源
            context:exclude-filter子节点指定排除那些指定表达是的组件
            context:include-filter子节点指定包含那些指定表达是的组件，改子节点需要use-default-filter配合使用

    Spring AOP（面向切面编程）

            连接点：
                定义：连接点是一个应用执行过程中能够插入一个切面的点。
                连接点可以是调用方法时、抛出异常时、甚至修改字段时、
                切面代码可以利用这些点插入到应用的正规流程中
                程序执行过程中能够应用通知的所有点。
            切点：
                定义：如果通知定义了“什么”和“何时”。那么切点就定义了“何处”。切点会匹配通知所要织入的一个或者多个连接点。
                通常使用明确的类或者方法来指定这些切点。
                作用：定义通知被应用的位置（在哪些连接点）
            切面：
                定义：切面是通知和切点的集合，通知和切点共同定义了切面的全部功能——它是什么，在何时何处完成其功能。

                基于注解的方式
                1、<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
                2、把横切关注点的代码声明到切面的类中
                    切面类首先是一个IOC中的Bean，即在切面类上加入@Component注解
                    切面类还需要加入@Aspect注解，表明该类是一个切面类
                3、在切面类中声明各种通知方法并完成需要的逻辑代码
                    前置通知
                    后置通知
                    返回通知
                    异常通知
                    环绕通知（不常用）
                    执行顺序（前置通知——>后置通知——>异常通知（当有异常时）——>返回通知）
                        前置通知：the mul method is begins。。。the args is：[3, 3]
                        the mul result is ：9
                        后置通知：the mul method is over
                        返回通知：the result of mul is：null

                    定义切入点表达式：
                        execution(返回值类型 包名.类名.方法名(参数类型列表))

                        下面以前置通知为例
                        @Before("execution(* com.jiangcl.spring.aop.annotation.Calculator.*(int,int))")
                        public void method(){}

                        切入点表达式可以指定到包
                        execution(* com.jiangcl.spring.aop.annotation.*.*(..))

                4、可以在声明的通知方法中声明一个JoinPoint类型的参数，然后通过该参数就能访问链接细节，比如方法名称和参数信息等
                        JoinPoint
                         java.lang.Object[] getArgs()：获取连接点方法运行时的入参列表；
                         Signature getSignature() ：获取连接点的方法签名对象；
                         java.lang.Object getTarget() ：获取连接点所在的目标对象；
                         java.lang.Object getThis() ：获取代理对象本身；
                        参考网址：https://blog.csdn.net/qq_33535433/article/details/79940747
            切面的优先级
                当定义了多个切面时，可以使用@Order(int num)定义切面的优先级，值越小优先级越高

    Spring事务
        事务的传播行为：当前事物方法被另外一个事物方法调用时如何使用事务。
                    默认为：REQUIRED
        参考网址：https://www.cnblogs.com/alimayun/p/10933289.html


